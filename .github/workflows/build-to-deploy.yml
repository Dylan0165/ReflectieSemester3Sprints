name: Build and Deploy to Deploy Branch

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DEPLOY_BRANCH: 'deploy'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist/ directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Build failed: dist/index.html not found"
            exit 1
          fi
          echo "✅ Build successful"
          ls -la dist/
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Prepare deploy branch
        run: |
          # Check if deploy branch exists on remote
          if git ls-remote --heads origin ${{ env.DEPLOY_BRANCH }} | grep -q ${{ env.DEPLOY_BRANCH }}; then
            echo "Deploy branch exists, checking out"
            git fetch origin ${{ env.DEPLOY_BRANCH }}
            git checkout ${{ env.DEPLOY_BRANCH }}
            git pull origin ${{ env.DEPLOY_BRANCH }}
          else
            echo "Deploy branch doesn't exist, creating new orphan branch"
            git checkout --orphan ${{ env.DEPLOY_BRANCH }}
            git rm -rf .
          fi
      
      - name: Copy build artifacts and manifests
        run: |
          # Clean up old files
          git checkout main -- dist/ manifests/ README.md
          
          # Ensure manifests directory structure exists
          mkdir -p manifests/base
          mkdir -p manifests/overlays/test
          mkdir -p manifests/overlays/acc
          mkdir -p manifests/overlays/prod
          
          echo "✅ Files prepared for deployment"
      
      - name: Update kustomization.yaml paths
        run: |
          # Update the kustomization.yaml to use correct relative paths
          # In deploy branch, dist/ is at root level
          sed -i 's|index.html=../../dist/index.html|index.html=../../dist/index.html|g' manifests/base/kustomization.yaml
          
          echo "✅ Kustomization paths updated"
          cat manifests/base/kustomization.yaml
      
      - name: Create deployment info
        run: |
          cat > DEPLOYMENT_INFO.md << EOF
          # Deployment Information
          
          **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **Commit SHA**: ${{ github.sha }}
          **Commit Message**: ${{ github.event.head_commit.message }}
          **Branch**: main
          **Workflow**: ${{ github.workflow }}
          **Run Number**: ${{ github.run_number }}
          
          ## Build Status
          ✅ Build completed successfully
          ✅ Ready for Argo CD deployment
          
          ## Deployed Files
          - dist/ (production build)
          - manifests/ (Kubernetes manifests)
          
          ## Environments
          - **Test**: Auto-sync enabled (push-on-green)
          - **Acc**: Auto-sync enabled (push-on-green)
          - **Prod**: Manual sync required (manual approval)
          EOF
      
      - name: Commit and push to deploy branch
        run: |
          # Add all files
          git add -A
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit with timestamp
            TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            git commit -m "Release ${TIMESTAMP}"
            
            # Push to deploy branch
            git push origin ${{ env.DEPLOY_BRANCH }}
            
            echo "✅ Successfully pushed to ${{ env.DEPLOY_BRANCH }} branch"
          fi
      
      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Pushed to \`${{ env.DEPLOY_BRANCH }}\` branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- **Test & Acc**: Will auto-deploy via Argo CD (push-on-green)" >> $GITHUB_STEP_SUMMARY
          echo "- **Prod**: Requires manual sync in Argo CD UI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
